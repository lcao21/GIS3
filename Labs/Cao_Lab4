{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 4 - Spatial Analysis in Python, Part 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lily Cao"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pandas Tutorial Exercises (2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas \n",
    "import numpy as np \n",
    "data = pandas.read_csv('GIS 3/CAINC1__ALL_STATES_1969_2017.csv', encoding='latin-1', \n",
    "                      skipfooter=3, engine='python')\n",
    "pandas.set_option('display.max_columns', 500)\n",
    "data1 = data.replace(\"(NA)\", 0)\n",
    "data1['1969'] = data1['1969'].astype(int)\n",
    "\n",
    "small = data[data.LineCode.isin( [2, 3] )]\n",
    "for year in range(1969, 2018):\n",
    "    small = small[small[str(year)] != \"(NA)\"]\n",
    "    \n",
    "convert_dict = dict([(str(year), int) for year in range (1969, 2018)])\n",
    "small = small.astype(convert_dict)\n",
    "\n",
    "geofips = pandas.unique(small.GeoFIPS)\n",
    "small['GeoFIPS'] = [fips.replace(\"\\\"\", \"\").strip() for fips in small.GeoFIPS]\n",
    "geofips = pandas.unique(small.GeoFIPS)\n",
    "\n",
    "pc_inc = small[small.LineCode==3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Identify the area with the lowest per-capita income each year*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Area</th>\n",
       "      <th>Income</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8225    Loving, TX</td>\n",
       "      <td>1166</td>\n",
       "      <td>1969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8414    Starr, TX</td>\n",
       "      <td>1381</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7964    Dimmit, TX</td>\n",
       "      <td>1497</td>\n",
       "      <td>1971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8534    Zavala, TX</td>\n",
       "      <td>1702</td>\n",
       "      <td>1972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7964    Dimmit, TX</td>\n",
       "      <td>1971</td>\n",
       "      <td>1973</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Area  Income  Year\n",
       "0  8225    Loving, TX    1166  1969\n",
       "1   8414    Starr, TX    1381  1970\n",
       "2  7964    Dimmit, TX    1497  1971\n",
       "3  8534    Zavala, TX    1702  1972\n",
       "4  7964    Dimmit, TX    1971  1973"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "area_lst = []\n",
    "lowest_lst = []\n",
    "year_lst = []\n",
    "\n",
    "for i in range(8,57):\n",
    "    year = pc_inc.iloc[:, [i]]\n",
    "    year_lst.append(year.columns[0])\n",
    "    \n",
    "    lowest = year.min()\n",
    "    lowest_lst.append(lowest[0])\n",
    "    \n",
    "    area = pc_inc.loc[pc_inc[pc_inc.iloc[:, [i]].columns].idxmin()].GeoName.to_string()\n",
    "    area_lst.append(area)\n",
    "    \n",
    "df = pandas.DataFrame({'Area': area_lst, 'Income': lowest_lst, 'Year': year_lst})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*As a percentage of the minimum per-captia income, calculate the relative income gap between the extremes of the income distribution each year. Identify the year with the maximum relative income gap.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1969</td>\n",
       "      <td>6.724700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970</td>\n",
       "      <td>6.891383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1971</td>\n",
       "      <td>6.822979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1972</td>\n",
       "      <td>6.873678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1973</td>\n",
       "      <td>6.931507</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year     Ratio\n",
       "0  1969  6.724700\n",
       "1  1970  6.891383\n",
       "2  1971  6.822979\n",
       "3  1972  6.873678\n",
       "4  1973  6.931507"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratio_lst = []\n",
    "\n",
    "for i in range(8,57):\n",
    "    \n",
    "    year = pc_inc.iloc[:, [i]]\n",
    "    lowest = year.min()   \n",
    "    highest = year.max()\n",
    "    \n",
    "    ratio = highest[0]/lowest[0]\n",
    "    ratio_lst.append(ratio)\n",
    "    \n",
    "df2 = pandas.DataFrame({'Year': year_lst, 'Ratio': ratio_lst})\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum relative gap: 19.591187065426823 occurred in 2017\n"
     ]
    }
   ],
   "source": [
    "print(\"Maximum relative gap: {} occurred in {}\".format(df2.loc[df2['Ratio'].idxmax()][1], df2.loc[df2['Ratio'].idxmax()][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## New graphic using something learned in the \"Visualizations\" tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x114ff82b0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn\n",
    "seaborn.catplot(x='Year',\n",
    "                y='Ratio',\n",
    "                data=df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.JointGrid at 0x115feb438>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "seaborn.jointplot('Year', \n",
    "                  'Ratio', \n",
    "                  df2, \n",
    "                  kind='kde')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How is data stored in R versus pandas/Python?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pandas store (a table of) data in a DataFrame, a 2D data structure that can store various types of data like characters, integers, categorical data and more in its columns. Each column in a DataFrame is a Series, which is a 1D numpy ndarray with row labels but no column labels. Internally, pandas also groups the columns into blocks of values of the same data type (i.e. IntBlock stores data of type integer). The blocks are numpy arrays with a slice object that defines which of the DataFrame's colums are stored in it. \n",
    "\n",
    "R stores data tables in a data frame through the data.frame() function. It is a special case of lists; specifically, it's a list of equal-length vectors. Like a DataFrame in pandas, it can store different classes of data in its columns. Unlike a DataFrame in Python, it is a built-in construct and doesn't have to be imported like it does through pands in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How is spatial data stored in sf/R versus geopandas/Python?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In R, the sf package represents simple features as native R objects. The attributes are stored in data frames, with the geographic data stored in its own (list-)column, usually named \"geom\" or \"geometry.\" Since geometries aren't single-valued, they're put in a list-column. More specifically, sf is the data frame with feature attributes and geometries. It contains sfc, the list-column, which is composed of sfg, the geometry of each simple feature. \n",
    "\n",
    "GeoPandas stores spatial data in GeoDataFrames, which extends the functionalities of DataFrame from pandas and contains GeoSeries. Geometries are stored in a \"geometry\" column (which is a GeoSeries) and stored as Shapely (a Python package) objects. There can be multiple columns with Shapely objects but only column can be the \"active\" geometry at a time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Identify 3 more differences you uncovered in syntax logic or computational processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Function| R | Python| \n",
    "|------|------|------|\n",
    "|Group By| group_by(df, col1)  | df.groupby('col1')|\n",
    "|Sorting | arrange(df, desc(col1)) |df.sort_values('col1', ascending=False)|\n",
    "|Filtering| filter(df, col1 == 1, col2 = 2) | df.query('col1 == 1 & col2 == 2')|\n",
    "|Summarizing| summary(df) | df.describe()|\n",
    "|Selecting Matched Data| x %in% c(1,2) | match(x, c(1,2))|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general:\n",
    "- R is more functional while Python is more object-oriented\n",
    "- R has more built-in data analysis (i.e. summary) while Python relies on packages (i.e. have to import pandas for descrbe())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
